<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/websocket
           http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd
           http://www.springframework.org/schema/jms
           http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-4.0.xsd
           ">
           
	<!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.cictec.web.*"/>

	<!--proxy-target-class="true"强制使用cglib代理 如果为false则spring会自动选择 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 数据库配置文件位置 -->
	<context:property-placeholder
		location="classpath:conf/jdbc-postgresql.properties" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		  <property name="driverClassName" value="${db.driver}"/>
		  <property name="url" value="${db.jdbcurl}"/>
		  <property name="username" value="${db.username}"/>
		  <property name="password" value="${db.password}"/>
		  <!-- 连接池启动时的初始值 -->
		  <property name="initialSize" value="2" />
		  <!-- 连接池的最大值 -->
		  <property name="maxActive" value="100" />
		  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		  <property name="maxIdle" value="50" />
		  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		  <property name="minIdle" value="10" />
		  <!--#给出一条简单的sql语句进行验证-->
		  <property name="validationQuery" value="SELECT current_timestamp" />
		  <!--#在取出连接时进行有效验证-->
		  <property name="testOnBorrow" value="true" />
		  <property name="removeAbandonedTimeout" value="120" />
		  <property name="removeAbandoned" value="true" />
		  <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		  <property name="timeBetweenEvictionRunsMillis" value="3600000" />
		  <!-- #连接的超时时间，默认为半小时。 -->
		  <property name="minEvictableIdleTimeMillis" value="3600000" />  
 	</bean>
	
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
 	<tx:annotation-driven transaction-manager="transactionManager"/>  
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />
			<tx:method name="query*" propagation="REQUIRED" />
			<tx:method name="copy*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.cictec.web.auth.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>	
	
	<bean id="dataSourceFuel" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		  <property name="driverClassName" value="${db.driver}"/>
		  <property name="url" value="${db.jdbcurlfuel}"/>
		  <property name="username" value="${db.username}"/>
		  <property name="password" value="${db.password}"/>
		  <!-- 连接池启动时的初始值 -->
		  <property name="initialSize" value="10" />
		  <!-- 连接池的最大值 -->
		  <property name="maxActive" value="50" />
		  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		  <property name="maxIdle" value="50" />
		  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		  <property name="minIdle" value="10" />
		  <!--#给出一条简单的sql语句进行验证-->
		  <property name="validationQuery" value="SELECT current_timestamp" />
		  <!--#在取出连接时进行有效验证-->
		  <property name="testOnBorrow" value="true" />
		  <property name="removeAbandonedTimeout" value="120" />
		  <property name="removeAbandoned" value="true" />
		  <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		  <property name="timeBetweenEvictionRunsMillis" value="3600000" />
		  <!-- #连接的超时时间，默认为半小时。 -->
		  <property name="minEvictableIdleTimeMillis" value="3600000" />  
 	</bean>
 	
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactoryFuel" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-configFuel.xml"></property>
		<property name="dataSource" ref="dataSourceFuel" />
	</bean>

	<bean id="sqlSessionFuel" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryFuel" />
	</bean>

	<bean id="transactionManagerFuel" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceFuel"/>
	</bean>
 	<tx:annotation-driven transaction-manager="transactionManagerFuel"/>  

	<tx:advice id="txAdviceFuel" transaction-manager="transactionManagerFuel">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />
			<tx:method name="query*" propagation="REQUIRED" />
			<tx:method name="copy*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="interceptorPointCutsFuel"
			expression="execution(* com.cictec.web.fuel.service.*.*(..))" />
		<aop:advisor advice-ref="txAdviceFuel" pointcut-ref="interceptorPointCutsFuel" />
	</aop:config>

	
	<bean id="dataSourceBus" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		  <property name="driverClassName" value="${db.driver}"/>
		  <property name="url" value="${db.jdbcurlbus}"/>
		  <property name="username" value="${db.username}"/>
		  <property name="password" value="${db.password}"/>
		  <!-- 连接池启动时的初始值 -->
		  <property name="initialSize" value="10" />
		  <!-- 连接池的最大值 -->
		  <property name="maxActive" value="50" />
		  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		  <property name="maxIdle" value="50" />
		  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		  <property name="minIdle" value="10" />
		  <!--#给出一条简单的sql语句进行验证-->
		  <property name="validationQuery" value="SELECT current_timestamp" />
		  <!--#在取出连接时进行有效验证-->
		  <property name="testOnBorrow" value="true" />
		  <property name="removeAbandonedTimeout" value="120" />
		  <property name="removeAbandoned" value="true" />
		  <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		  <property name="timeBetweenEvictionRunsMillis" value="3600000" />
		  <!-- #连接的超时时间，默认为半小时。 -->
		  <property name="minEvictableIdleTimeMillis" value="3600000" />  
 	</bean>
 		
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactoryBus" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-configBus.xml"></property>
		<property name="dataSource" ref="dataSourceBus" />
	</bean>

	<bean id="sqlSessionBus" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBus" />
	</bean>

	<bean id="transactionManagerBus" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceBus"/>
	</bean>
 	<tx:annotation-driven transaction-manager="transactionManagerBus"/>  

	<tx:advice id="txAdviceBus" transaction-manager="transactionManagerBus">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />
			<tx:method name="query*" propagation="REQUIRED" />
			<tx:method name="copy*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="interceptorPointCutsBus"
			expression="execution(* com.cictec.web.fuel.service.*.*(..))" />
		<aop:advisor advice-ref="txAdviceBus" pointcut-ref="interceptorPointCutsBus" />
	</aop:config> 
	
	<bean id="logRecordService" class="com.cictec.web.fuel.service.LogRecordService"/>  
  
    <bean id="DBLog" class="com.cictec.web.fuel.util.DBLogger">  
        <property name="logRecService" ref="logRecordService"/>  
    </bean>  

     <!-- 服务端接口的filterbean -->
    <bean id="fuelBusinessShiroFilter" class="com.cictec.web.auth.filter.FuelBusinessShiroFilter"></bean>
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.cictec.web.auth.filter.LoginUserPermissionsShiroFilter"/>  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>  
     <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->      
    
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
      
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <property name="filters">
            <map>
                <entry key="fuelBusiness" value-ref="fuelBusinessShiroFilter" />
            </map>
        </property>
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种   -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions">  
            <value>  
                /admin/*=anon
                /fuelData/getBusYearData=anon

                /user/login=fuelBusiness
                /record/upload=fuelBusiness
                /device/repair=fuelBusiness
                /version/update=fuelBusiness
                /data/update=fuelBusiness
                /user/update/pwd=fuelBusiness

                /busLine/*=authc
                /org/*=authc
                /authorityMgmtCtr/*=authc
                /AuthManagement/*=authc
                /fuelReport/*=authc
                /gasStationMgmt/*=authc
                /systemRemind/*=authc
                
            </value>  
        </property>  
    </bean>  

</beans>